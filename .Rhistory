require(ggplot2)
install.packages(c("plyr", "reshape", "dplyr", "zoo", "lubridate", "lattice", "ggplot2", "reshape2"))
library("zoo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.0")
require(ggplot2)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("plyr")
require(ggplot2)
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/almbrand-data-analytics/dashboard/d2drives')
shiny::runApp('gitrepos/almbrand-data-analytics/dashboard/d2drives')
?beak
??beak
getwd()
shiny::runApp('gitrepos/Gas-sensors')
paste("Sensor"seq(1,10,1))
paste("Sensor",seq(1,10,1))
shiny::runApp('gitrepos/Gas-sensors')
list(paste("S",seq(1,10,1)))
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/almbrand-data-analytics/dashboard/d2drives')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/almbrand-data-analytics/dashboard/d2drives')
shiny::runApp('gitrepos/Gas-sensors')
nox14$Street <- paste("1",seq_along(nrow(nox14)))
View(nox14)
nox14$Street <- rep("1",nrow(nox14))
# convert into specific data frames
View(nox14)
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/almbrand-data-analytics/dashboard/d2drives')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
head(co[which(nox14$Street=="1"), 2:ncol(co)])
shiny::runApp('gitrepos/Gas-sensors')
View(battery)
head(co[which(nox14$Street=="1"), names(2:ncol(co))])
head(co[which(nox14$Street=="1"), names(co[2:ncol(co)])])
colnames(c[2:3])
colnames(c[2])
class(nox14$DateTime)
head(which(nox14$Street=="1"&& is.character()))
testnox <- nox
testnox <- nox14
View(testnox)
head(as.factor(testnox$Sensor.1...NO...ppm.))
count(which(class(co)=="character"))
(which(class(co)=="character"))
(class(co)=="character"))
(class(co)=="character")
lapply(co, function(x) class(co)=="numeric")
lapply(co, function(x) class(co)=="integer")
lapply(co, function(x) class(x)=="integer")
lapply(co, function(x) class(x)=="character")
lapply(co, function(x) is.character(x))
shiny::runApp('gitrepos/Gas-sensors')
View(co)
shiny::runApp('gitrepos/Gas-sensors')
nox14[,grep(pattern = paste("Sensor.",seq(1,3,1)),x = names(nox14), value=T)]
nox14[,grep(pattern = paste("Sensor.",seq(1,1,1)),x = names(nox14), value=T)]
nox14[,grep(pattern = "^Sensor.1$",x = names(nox14), value=T)]
nox14[,grep(pattern = "NO",x = names(nox14), fixed = T ,value=T)]
nox14[,grep(pattern = "^Sensor.1$",x = names(nox14))]
grep(pattern = "^Sensor.1$",x = names(nox14))=="Sensor.1"
ifelse(grep(pattern = "^Sensor.1$",x = names(nox14))=="Sensor.1",T,F)
ifelse(grep(pattern = "^Sensor.1$",x = names(nox14))=="Sensor.1...CO..ppm.",T,F)
names(nox14)
grep(pattern = "^Sensor 1$",x = names(nox14))
grep(pattern = "Sensor ",x = names(nox14))
grep(pattern = "Street", x = names(nox14))
grep(pattern = "Street", x = names(co))
lapply(names(co), function(x) ifelse(x=="Street", T, F))
lapply(names(co), function(x) ifelse(x=="nox14$Street", T, F))
ggplot()+geom_line(data = co, aes(x=co[,1], y= co[,3]))
ggplot()+geom_line(data = co, aes(x=co[,1], y= co[,4]))
ggplot()+geom_line(data = co, aes(x=co[,1], y= co[,5]))
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
shiny::runApp('gitrepos/Gas-sensors')
coplot <- function(){
ggplot()+geom_line(data=co, aes(x=co[,1], y=co[,3]))
}
coplot()
shiny::runApp('gitrepos/Gas-sensors')
head(reshape2::melt(data = co, id.vars = c(co[,1],co[,2]), measure.vars = c(co[,3],co[,4],co[,5])))
reshape2::melt(data = co, id.vars = c(co[,1],co[,2]), measure.vars = c(co[,3],co[,4],co[,5]))
reshape2::melt(data = co, id.vars = c(co$`nox14[, grep(pattern = "^DateTime.3$", x = names(nox14), value = T)]`,co$`nox14$Street`), measure.vars = c(co[,3],co[,4],co[,5]))
head(airquality)
head(melt(airquality, id.vars = =c("Month","Day")))
head(melt(airquality, id.vars = c("Month","Day")))
reshape2::melt(data = co, id.vars = c(`nox14[, grep(pattern = "^DateTime.3$", x = names(nox14), value = T)]`,`nox14$Street`))
head(reshape2::melt(data = co, id.vars = c("`nox14[, grep(pattern = "^DateTime.3$", x = names(nox14), value = T)]`","`nox14$Street`")))
head(reshape2::melt(data = co, id.vars = c("co[,1]","`nox14$Street`")))
head(reshape2::melt(data = co, id.vars = c("co[,1]","co[,2")))
head(reshape2::melt(data = co, id.vars = c("co[,1]","co[,2]")))
head(co[,1])
names(co)[1]
head(reshape2::melt(data = co, id.vars = c("names(co)[1]","names(co)[2]")))
head(reshape2::melt(data = co, id.vars = c(names(co)[1],"names(co)[2]")))
head(reshape2::melt(data = co, id.vars = c(names(co)[1],names(co)[2])))
8005*3
noMelted <- melt(data = co, id.vars = c(names(co)[1],names(co)[2]))
View(noMelted)
noMelted <- melt(data = co, id.vars = c(names(co)[1],names(co)[2]), measure.vars = c(co[,3],co[,4],co[,5]))
noMelted <- melt(data = no, id.vars = c(names(no)[1],names(no)[2]))
coMelted <- melt(data = co, id.vars = c(names(co)[1],names(co)[2]))
batteryMelted <- melt(data = battery, id.vars = c(names(battery)[1],names(battery)[2]))
humidityMelted <- melt(data = humidity, id.vars = c(names(humidity)[1],names(humidity)[2]))
temperatureMelted <- melt(data = temperature, id.vars = c(names(temperature)[1],names(temperature)[2]))
head(co[which(grep("Sensor.1",co))])
head(co[which(Sensor.1...CO..ppm.)])
head(co[which(Sensor.1...CO..ppm.),coMelted$variable])
head(co[which(,coMelted$variable==Sensor.1...CO..ppm.)])
head(co[which(coMelted$variable==Sensor.1...CO..ppm.)])
head(co[which(coMelted$variable=="Sensor.1...CO..ppm.")])
head(co[which(coMelted$variable=="Sensor.1...CO..ppm."),])
head(co[which(coMelted$variable=="Sensor.2...CO..ppm."),])
View(coMelted)
View(nox14)
ggplot()+geom_line(data=co, aes(x=co[,1], y=co[,4]))
head(coMelted[which(coMelted$variable=="Sensor.2...CO..ppm."),])
shiny::runApp('gitrepos/Gas-sensors')
# NOX observations
require(ggplot2)
require(lubridate)
require(dplyr)
require(reshape2)
require(gridExtra)
require(RCurl)
require(rjson)
#TODO
# aarhus univ prof modeling outdoor air quality
# this gives column names by itself
# TODO
# should factor the sensors and create buckets for different sensors
# we should just apply time conversion once a month is selected
#keen <- read.table(file = "546356193831445dc0f141be-FirstTest-log-1447690322-J69FIW", stringsAsFactors = F,
#                   sep = ",", header = T, skip = 0)
#nox14 <- bind_rows(l) # l is the list of all the csv inputs
nox14 <- read.table(file = "data/nox2014.csv", sep = ",", stringsAsFactors = F, header = T, skip=0)[-1]
nox14$Street <- rep("1",nrow(nox14))
# can also consider rbindlist from data.table might be faster for larger datasets
# while creating databse create headers such as Sensor 1
# convert into specific data frames
no <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
no <- cbind(no, nox14$Street, as.data.frame(nox14[,grep(pattern = "NO",x = names(nox14), fixed = T ,value=T)]))
noMelted <- melt(data = no, id.vars = c(names(no)[1],names(no)[2]))
co <- as.data.frame(nox14[,grep(pattern = "^DateTime.3$",x = names(nox14), value=T)])  # because the interval is different
co <- cbind(co, nox14$Street, as.data.frame(nox14[,grep(pattern = "CO",x = names(nox14), fixed = T ,value=T)]))
coMelted <- melt(data = co, id.vars = c(names(co)[1],names(co)[2]))
temperature <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
temperature <- cbind(temperature, nox14$Street, as.data.frame(nox14[,grep(pattern = "Temperature",x = names(nox14), fixed = T ,value=T)]))
temperatureMelted <- melt(data = temperature, id.vars = c(names(temperature)[1],names(temperature)[2]))
humidity <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
humidity <- cbind(humidity, nox14$Street, as.data.frame(nox14[,grep(pattern = "Humidity",x = names(nox14), fixed = T ,value=T)]))
humidityMelted <- melt(data = humidity, id.vars = c(names(humidity)[1],names(humidity)[2]))
battery <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
battery <- cbind(battery, nox14$Street, as.data.frame(nox14[,grep(pattern = "Battery",x = names(nox14), fixed = T ,value=T)]))
batteryMelted <- melt(data = battery, id.vars = c(names(battery)[1],names(battery)[2]))
# convert character timestamps into date objects
timeconvert <- function(dataset){
if (is.list(dataset) || is.data.frame(dataset)){
dataset[,1] <- ymd_hms(dataset[,1])
return(dataset[,1])
}
}
no[,1] <- timeconvert(no);co[,1] <- timeconvert(co);temperature[,1] <- timeconvert(temperature);humidity[,1] <- timeconvert(humidity);battery[,1] <- timeconvert(battery)
# ggplot2 graphs
noplot <- function(){
ggplot()+geom_line(data=no, aes(x=no[,1], y=no[,3]))
}
coplot <- function(){
ggplot()+geom_line(data=coMelted, aes(x=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),1], y=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),3]))
}
# NOX observations
require(ggplot2)
require(lubridate)
require(dplyr)
require(reshape2)
require(gridExtra)
require(RCurl)
require(rjson)
#TODO
# aarhus univ prof modeling outdoor air quality
# this gives column names by itself
# TODO
# should factor the sensors and create buckets for different sensors
# we should just apply time conversion once a month is selected
#keen <- read.table(file = "546356193831445dc0f141be-FirstTest-log-1447690322-J69FIW", stringsAsFactors = F,
#                   sep = ",", header = T, skip = 0)
#nox14 <- bind_rows(l) # l is the list of all the csv inputs
nox14 <- read.table(file = "data/nox2014.csv", sep = ",", stringsAsFactors = F, header = T, skip=0)[-1]
nox14$Street <- rep("1",nrow(nox14))
# can also consider rbindlist from data.table might be faster for larger datasets
# while creating databse create headers such as Sensor 1
# convert into specific data frames
no <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
no <- cbind(no, nox14$Street, as.data.frame(nox14[,grep(pattern = "NO",x = names(nox14), fixed = T ,value=T)]))
noMelted <- melt(data = no, id.vars = c(names(no)[1],names(no)[2]))
co <- as.data.frame(nox14[,grep(pattern = "^DateTime.3$",x = names(nox14), value=T)])  # because the interval is different
co <- cbind(co, nox14$Street, as.data.frame(nox14[,grep(pattern = "CO",x = names(nox14), fixed = T ,value=T)]))
coMelted <- melt(data = co, id.vars = c(names(co)[1],names(co)[2]))
temperature <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
temperature <- cbind(temperature, nox14$Street, as.data.frame(nox14[,grep(pattern = "Temperature",x = names(nox14), fixed = T ,value=T)]))
temperatureMelted <- melt(data = temperature, id.vars = c(names(temperature)[1],names(temperature)[2]))
humidity <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
humidity <- cbind(humidity, nox14$Street, as.data.frame(nox14[,grep(pattern = "Humidity",x = names(nox14), fixed = T ,value=T)]))
humidityMelted <- melt(data = humidity, id.vars = c(names(humidity)[1],names(humidity)[2]))
battery <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
battery <- cbind(battery, nox14$Street, as.data.frame(nox14[,grep(pattern = "Battery",x = names(nox14), fixed = T ,value=T)]))
batteryMelted <- melt(data = battery, id.vars = c(names(battery)[1],names(battery)[2]))
# convert character timestamps into date objects
timeconvert <- function(dataset){
if (is.list(dataset) || is.data.frame(dataset)){
dataset[,1] <- ymd_hms(dataset[,1])
return(dataset[,1])
}
}
no[,1] <- timeconvert(no);co[,1] <- timeconvert(co);temperature[,1] <- timeconvert(temperature);humidity[,1] <- timeconvert(humidity);battery[,1] <- timeconvert(battery)
# ggplot2 graphs
noplot <- function(){
ggplot()+geom_line(data=no, aes(x=no[,1], y=no[,3]))
}
coplot <- function(){
ggplot()+geom_line(data=coMelted, aes(x=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),1], y=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),3]))
}
setwd(dir = "4")
setwd(dir = "gitrepos/Gas-sensors/")
ggplot()+geom_line(data=no, aes(x=no[,1], y=no[,3]))
# NOX observations
require(ggplot2)
require(lubridate)
require(dplyr)
require(reshape2)
require(gridExtra)
require(RCurl)
require(rjson)
#TODO
# aarhus univ prof modeling outdoor air quality
# this gives column names by itself
# TODO
# should factor the sensors and create buckets for different sensors
# we should just apply time conversion once a month is selected
#keen <- read.table(file = "546356193831445dc0f141be-FirstTest-log-1447690322-J69FIW", stringsAsFactors = F,
#                   sep = ",", header = T, skip = 0)
#nox14 <- bind_rows(l) # l is the list of all the csv inputs
nox14 <- read.table(file = "data/nox2014.csv", sep = ",", stringsAsFactors = F, header = T, skip=0)[-1]
nox14$Street <- rep("1",nrow(nox14))
# can also consider rbindlist from data.table might be faster for larger datasets
# while creating databse create headers such as Sensor 1
# convert into specific data frames
no <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
no <- cbind(no, nox14$Street, as.data.frame(nox14[,grep(pattern = "NO",x = names(nox14), fixed = T ,value=T)]))
noMelted <- melt(data = no, id.vars = c(names(no)[1],names(no)[2]))
co <- as.data.frame(nox14[,grep(pattern = "^DateTime.3$",x = names(nox14), value=T)])  # because the interval is different
co <- cbind(co, nox14$Street, as.data.frame(nox14[,grep(pattern = "CO",x = names(nox14), fixed = T ,value=T)]))
coMelted <- melt(data = co, id.vars = c(names(co)[1],names(co)[2]))
temperature <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
temperature <- cbind(temperature, nox14$Street, as.data.frame(nox14[,grep(pattern = "Temperature",x = names(nox14), fixed = T ,value=T)]))
temperatureMelted <- melt(data = temperature, id.vars = c(names(temperature)[1],names(temperature)[2]))
humidity <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
humidity <- cbind(humidity, nox14$Street, as.data.frame(nox14[,grep(pattern = "Humidity",x = names(nox14), fixed = T ,value=T)]))
humidityMelted <- melt(data = humidity, id.vars = c(names(humidity)[1],names(humidity)[2]))
battery <- as.data.frame(nox14[,grep(pattern = "^DateTime$",x = names(nox14), value=T)])
battery <- cbind(battery, nox14$Street, as.data.frame(nox14[,grep(pattern = "Battery",x = names(nox14), fixed = T ,value=T)]))
batteryMelted <- melt(data = battery, id.vars = c(names(battery)[1],names(battery)[2]))
# convert character timestamps into date objects
timeconvert <- function(dataset){
if (is.list(dataset) || is.data.frame(dataset)){
dataset[,1] <- ymd_hms(dataset[,1])
return(dataset[,1])
}
}
no[,1] <- timeconvert(no);co[,1] <- timeconvert(co);temperature[,1] <- timeconvert(temperature);humidity[,1] <- timeconvert(humidity);battery[,1] <- timeconvert(battery)
# ggplot2 graphs
noplot <- function(){
ggplot()+geom_line(data=no, aes(x=no[,1], y=no[,3]))
}
coplot <- function(){
ggplot()+geom_line(data=coMelted, aes(x=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),1], y=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),3]))
}
noplot()
coplot()
noMelted[,1] <- timeconvert(no);coMelted[,1] <- timeconvert(co);temperatureMelted[,1] <- timeconvert(temperature);humidityMelted[,1] <- timeconvert(humidity);batteryMelted[,1] <- timeconvert(battery)
coplot()
ggplot()+geom_line(data=coMelted$variable[which(coMelted$variable=="Sensor.1...CO..ppm.")], aes(x=data[,1], y=data[,4]))
ggplot()+geom_line(data=coMelted$variable[which(coMelted$variable=="Sensor.1...CO..ppm.")], aes(x=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),1], y=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),3]))
coplot <- function(){
ggplot()+geom_line(data=coMelted$variable[which(coMelted$variable=="Sensor.1...CO..ppm.")], aes(x=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),1], y=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),4]))
}
coplot()
coplot <- function(){
ggplot()+geom_line(data=coMelted, aes(x=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),1], y=coMelted[which(coMelted$variable=="Sensor.1...CO..ppm."),4]))
}
coplot()
View(nox14)
shiny::runApp()
shiny::runApp()
View(no)
class(no$`nox14[, grep(pattern = "^DateTime$", x = names(nox14), value = T)]`)
View(nox14)
shiny::runApp()
shiny::runApp()
shiny::runApp()
